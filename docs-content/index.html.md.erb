---
title: Monitoring Pivotal Cloud Foundry 
owner: PCF Metrics Platform Monitoring
---

This guide describes how Pivotal Cloud Foundry (PCF) operators can monitor their deployments. 

##<a id="guide"></a> In This Guide

This guide includes the following topics: 

* <a class="subnav" href="./kpi.html">Key Performance Indicators</a>: A list of Key Performance Indicators (KPIs) that operators may want to monitor with their PCF deployment to help ensure it is in a good operational state.
* <a class="subnav" href="./key-cap-scaling.html">Key Capacity Scaling Indicators</a>: A list of capacity scaling indicators that operators may want to  monitor to determine when they need to scale their PCF deployments.
* <a class="subnav" href="./metrics.html">Configuring a Monitoring System</a>: Guidance for setting up PCF with third-party monitoring platforms to continuously monitor component metrics and trigger health alerts.

For information about logging and metrics in PCF and about monitoring of services for PCF, see <a href="#resources">Additional Resources</a> below.

##<a id="new"></a> KPI Changes from PCF v1.11 to v1.12

This table highlights new and changed KPIs in PCF v1.12.


The internal MySQL job included in Elastic Runtime now emits metrics. See the [Elastic Runtime MySQL KPIs](../monitoring/kpi.html#kpi4MySQL).

<table>
  <tr>
    <th>Change</th>
    <th>Which KPI and why?</th>
    <th>See&hellip;</th>
  </tr>
  <tr>
    <td><em>New</em></td>
    <td>KPI: <strong><code>gorouter.file_descriptors</code></strong><br><br>
    New component functionality in the Gorouter system needs monitoring.
    </td>
    <td><a href="./kpi.html#file_descriptors">Link</a></td>
  </tr>
  <tr>
    <td><em>New</em></td>
    <td>KPI: <strong><code>gorouter.backend_exhausted_conns</code></strong><br><br>
    New component functionality in the Gorouter system needs monitoring.
    </td>
    <td><a href="./kpi.html#exhausted_connections">Link</a></td>
  </tr>
  <tr>
    <td><em>New</em></td>
    <td><strong>Elastic Runtime MySQL KPIs</strong><br><br>
    Elastic Runtime's internal MySQL database now emits metrics. See <a href="./kpi.html#kpi4MySQL">Elastic Runtime MySQL KPIs</a> for KPIs based on these metrics. PCF v1.10.25+ and v1.11.11+ patch releases also include this change.
    </td>
    <td><a href="./kpi.html#file_descriptors">Link</a></td>
  </tr>
  <tr>
    <td><em>Modified</em></td>
    <td>KPI: <strong><code>Firehose Dropped Messages</code></strong><br><br>
      It is now necessary to add <code>loggregator.doppler.dropped</code> to <code>DopplerServer.doppler.shedEnvelopes</code> to properly measure Dropped Messages.
    </td>
    <td><a href="./kpi.html#deriveddopplerserver.doppler">Link</a></td>
  </tr>
  <tr>
    <td><em>Modified</em></td>
    <td>KPI: <strong><code>Firehose Throughput</code></strong><br><br>
      It is now necessary to add <code>loggregator.doppler.ingress</code> to <code>DopplerServer.listeners.totalReceivedMessageCount</code> to properly measure Firehose Throughput.
    </td>
    <td><a href="./kpi.html#listeners.receivedEnvelopes">Link</a></td>
  </tr>
  <tr>
    <td><em>Modified</em></td>
    <td>KPI: <strong><code>Firehose Loss Rate</code></strong><br><br>
         Due to calculation changes in Firehose Dropped Messages and Firehose Throughput, the formula to calculate the Firehose Loss Rate has been modified.
    </td>
    <td><a href="./key-cap-scaling.html#firehose-loss-rate">Link</a></td>
  </tr>
  <tr>
    <td><em>Modified</em></td>
    <td>KPI: <strong><code>Scalable Syslog Drain Bindings Count</code></strong><br><br>
      Due to improvements in the underlying Adapter memory utilization, the number of adapters handled per drain has increased. This allows the recommended threshold scaling indicator to be increased accordingly. 
      <br><br>
      As of May 2018, the recommended scaling threshold for this metric was modified downward.
    </td>
    <td><a href="./key-cap-scaling.html#scalable-syslog-ksi">Link</a></td>
  </tr>
    
  <tr>
    <td><em>Modified</em></td>
    <td>KPI: <strong><code>BBS Time to Handle Requests</code></strong><br><br>
     Diego is now aggregating this metric to emit, every 60 seconds, the max value observed over 60 seconds. This updates the expected frequency of the metric. It also alters the recommended alerting measurement. 
    </td>
    <td><a href="./kpi.html#RequestLatency">Link</a></td>
  </tr>  
</table> 

##<a id="resources"></a> Additional Resources

For information about logging and metrics in PCF, see the following topics:

* [Configuring System Logging in Elastic Runtime](../opsguide/logging-config-opsman.html): 
This topic explains how to configure the PCF Loggregator system to scale its maximum throughput and to forward logs to an external aggregator service.
* [Logging and Metrics](../loggregator/index.html): A guide to Loggregator, the system which aggregates and streams logs and metrics 
from user apps and system components in Elastic Runtime.

For information about KPIs and metrics for PCF services, see the following topics:

* **RabbitMQ for PCF (on-demand)**: [Monitoring and KPIs for On-Demand RabbitMQ for PCF](https://docs.pivotal.io/rabbitmq-cf/monitor.html)
* **RabbitMQ for PCF (pre-provisioned)**: [Monitoring and KPIs for Pre-Provisioned RabbitMQ for PCF](https://docs.pivotal.io/rabbitmq-cf/monitor-pp.html)
